
HD44780_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000007c4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a30  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d2  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000977  00000000  00000000  00002c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00003618  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c9  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d81  00000000  00000000  00003cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00004a52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	f4 01       	movw	r30, r8
  6a:	17 02       	muls	r17, r23
  6c:	3b 02       	muls	r19, r27
  6e:	5e 02       	muls	r21, r30
  70:	81 02       	muls	r24, r17
  72:	a6 02       	muls	r26, r22
  74:	c9 02       	muls	r28, r25
  76:	ec 02       	muls	r30, r28
  78:	10 03       	mulsu	r17, r16
  7a:	33 03       	mulsu	r19, r19

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ec       	ldi	r30, 0xC4	; 196
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 36       	cpi	r26, 0x64	; 100
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <main>
  a2:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <BusLinesState>:
	if (S_C == 1) Sbit(bus_data, 3);
	else Cbit(bus_data, 3);
	if (R_L == 1) Sbit(bus_data, 2);
	else Cbit(bus_data, 2);
	BusLinesState(&bus_data, 0);
}
  aa:	af 92       	push	r10
  ac:	bf 92       	push	r11
  ae:	cf 92       	push	r12
  b0:	df 92       	push	r13
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <BusLinesState+0x16>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	fc 01       	movw	r30, r24
  c6:	80 81       	ld	r24, Z
  c8:	98 2f       	mov	r25, r24
  ca:	92 95       	swap	r25
  cc:	9f 70       	andi	r25, 0x0F	; 15
  ce:	99 83       	std	Y+1, r25	; 0x01
  d0:	8f 70       	andi	r24, 0x0F	; 15
  d2:	8a 83       	std	Y+2, r24	; 0x02
  d4:	70 e0       	ldi	r23, 0x00	; 0
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	7c 01       	movw	r14, r24
  dc:	01 e0       	ldi	r16, 0x01	; 1
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <BusLinesState+0x4e>
  e2:	77 23       	and	r23, r23
  e4:	31 f0       	breq	.+12     	; 0xf2 <BusLinesState+0x48>
  e6:	71 30       	cpi	r23, 0x01	; 1
  e8:	39 f4       	brne	.+14     	; 0xf8 <BusLinesState+0x4e>
  ea:	fe 01       	movw	r30, r28
  ec:	32 96       	adiw	r30, 0x02	; 2
  ee:	7f 01       	movw	r14, r30
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <BusLinesState+0x4e>
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	7c 01       	movw	r14, r24
  f8:	f7 01       	movw	r30, r14
  fa:	40 81       	ld	r20, Z
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	a4 e0       	ldi	r26, 0x04	; 4
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	0f 2e       	mov	r0, r31
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	af 2e       	mov	r10, r31
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	bf 2e       	mov	r11, r31
 10c:	f0 2d       	mov	r31, r0
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	9a 01       	movw	r18, r20
 114:	08 2e       	mov	r0, r24
 116:	02 c0       	rjmp	.+4      	; 0x11c <BusLinesState+0x72>
 118:	35 95       	asr	r19
 11a:	27 95       	ror	r18
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <BusLinesState+0x6e>
 120:	20 ff       	sbrs	r18, 0
 122:	10 c0       	rjmp	.+32     	; 0x144 <BusLinesState+0x9a>
 124:	cd 90       	ld	r12, X+
 126:	dc 90       	ld	r13, X
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	98 01       	movw	r18, r16
 12c:	f5 01       	movw	r30, r10
 12e:	00 80       	ld	r0, Z
 130:	02 c0       	rjmp	.+4      	; 0x136 <BusLinesState+0x8c>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <BusLinesState+0x88>
 13a:	f6 01       	movw	r30, r12
 13c:	30 81       	ld	r19, Z
 13e:	23 2b       	or	r18, r19
 140:	20 83       	st	Z, r18
 142:	10 c0       	rjmp	.+32     	; 0x164 <BusLinesState+0xba>
 144:	cd 90       	ld	r12, X+
 146:	dc 90       	ld	r13, X
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	98 01       	movw	r18, r16
 14c:	f5 01       	movw	r30, r10
 14e:	00 80       	ld	r0, Z
 150:	02 c0       	rjmp	.+4      	; 0x156 <BusLinesState+0xac>
 152:	22 0f       	add	r18, r18
 154:	33 1f       	adc	r19, r19
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <BusLinesState+0xa8>
 15a:	20 95       	com	r18
 15c:	f6 01       	movw	r30, r12
 15e:	30 81       	ld	r19, Z
 160:	23 23       	and	r18, r19
 162:	20 83       	st	Z, r18
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	12 96       	adiw	r26, 0x02	; 2
 168:	ff ef       	ldi	r31, 0xFF	; 255
 16a:	af 1a       	sub	r10, r31
 16c:	bf 0a       	sbc	r11, r31
 16e:	84 30       	cpi	r24, 0x04	; 4
 170:	91 05       	cpc	r25, r1
 172:	79 f6       	brne	.-98     	; 0x112 <BusLinesState+0x68>
 174:	61 11       	cpse	r22, r1
 176:	0f c0       	rjmp	.+30     	; 0x196 <BusLinesState+0xec>
 178:	5b 9a       	sbi	0x0b, 3	; 11
 17a:	87 ec       	ldi	r24, 0xC7	; 199
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <BusLinesState+0xd4>
 182:	00 c0       	rjmp	.+0      	; 0x184 <BusLinesState+0xda>
 184:	00 00       	nop
 186:	5b 98       	cbi	0x0b, 3	; 11
 188:	e7 ec       	ldi	r30, 0xC7	; 199
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <BusLinesState+0xe2>
 190:	00 c0       	rjmp	.+0      	; 0x192 <BusLinesState+0xe8>
 192:	00 00       	nop
 194:	30 c0       	rjmp	.+96     	; 0x1f6 <BusLinesState+0x14c>
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	f1 f4       	brne	.+60     	; 0x1d6 <BusLinesState+0x12c>
 19a:	71 11       	cpse	r23, r1
 19c:	0a c0       	rjmp	.+20     	; 0x1b2 <BusLinesState+0x108>
 19e:	5a 9a       	sbi	0x0b, 2	; 11
 1a0:	5b 9a       	sbi	0x0b, 3	; 11
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <BusLinesState+0xfc>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <BusLinesState+0x102>
 1ac:	00 00       	nop
 1ae:	5b 98       	cbi	0x0b, 3	; 11
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <BusLinesState+0x11e>
 1b2:	5b 9a       	sbi	0x0b, 3	; 11
 1b4:	e7 ec       	ldi	r30, 0xC7	; 199
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <BusLinesState+0x10e>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <BusLinesState+0x114>
 1be:	00 00       	nop
 1c0:	5b 98       	cbi	0x0b, 3	; 11
 1c2:	71 30       	cpi	r23, 0x01	; 1
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <BusLinesState+0x11e>
 1c6:	5a 98       	cbi	0x0b, 2	; 11
 1c8:	87 ec       	ldi	r24, 0xC7	; 199
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <BusLinesState+0x122>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <BusLinesState+0x128>
 1d2:	00 00       	nop
 1d4:	10 c0       	rjmp	.+32     	; 0x1f6 <BusLinesState+0x14c>
 1d6:	62 30       	cpi	r22, 0x02	; 2
 1d8:	71 f4       	brne	.+28     	; 0x1f6 <BusLinesState+0x14c>
 1da:	5b 9a       	sbi	0x0b, 3	; 11
 1dc:	e7 ea       	ldi	r30, 0xA7	; 167
 1de:	f1 e6       	ldi	r31, 0x61	; 97
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <BusLinesState+0x136>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <BusLinesState+0x13c>
 1e6:	00 00       	nop
 1e8:	5b 98       	cbi	0x0b, 3	; 11
 1ea:	87 ea       	ldi	r24, 0xA7	; 167
 1ec:	91 e6       	ldi	r25, 0x61	; 97
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <BusLinesState+0x144>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <BusLinesState+0x14a>
 1f4:	00 00       	nop
 1f6:	7f 5f       	subi	r23, 0xFF	; 255
 1f8:	72 30       	cpi	r23, 0x02	; 2
 1fa:	09 f0       	breq	.+2      	; 0x1fe <BusLinesState+0x154>
 1fc:	72 cf       	rjmp	.-284    	; 0xe2 <BusLinesState+0x38>
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	bf 90       	pop	r11
 214:	af 90       	pop	r10
 216:	08 95       	ret

00000218 <LCD_DisplEnable_CursOnOffBlink>:
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	19 f0       	breq	.+6      	; 0x22c <LCD_DisplEnable_CursOnOffBlink+0x14>
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	02 c0       	rjmp	.+4      	; 0x230 <LCD_DisplEnable_CursOnOffBlink+0x18>
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	89 83       	std	Y+1, r24	; 0x01
 230:	61 30       	cpi	r22, 0x01	; 1
 232:	21 f4       	brne	.+8      	; 0x23c <LCD_DisplEnable_CursOnOffBlink+0x24>
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	82 60       	ori	r24, 0x02	; 2
 238:	89 83       	std	Y+1, r24	; 0x01
 23a:	03 c0       	rjmp	.+6      	; 0x242 <LCD_DisplEnable_CursOnOffBlink+0x2a>
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	8d 7f       	andi	r24, 0xFD	; 253
 240:	89 83       	std	Y+1, r24	; 0x01
 242:	41 30       	cpi	r20, 0x01	; 1
 244:	21 f4       	brne	.+8      	; 0x24e <LCD_DisplEnable_CursOnOffBlink+0x36>
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	89 83       	std	Y+1, r24	; 0x01
 24c:	03 c0       	rjmp	.+6      	; 0x254 <LCD_DisplEnable_CursOnOffBlink+0x3c>
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	8e 7f       	andi	r24, 0xFE	; 254
 252:	89 83       	std	Y+1, r24	; 0x01
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <LCD_UserSymbolsWrite>:

void LCD_UserSymbolsWrite(uint8_t Addr, uint8_t *data)
{
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	1f 92       	push	r1
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	8b 01       	movw	r16, r22
	uint8_t bus_data = 0b1000000;
	
	bus_data |= Addr*8;
 27a:	88 0f       	add	r24, r24
 27c:	88 0f       	add	r24, r24
 27e:	88 0f       	add	r24, r24
 280:	80 64       	ori	r24, 0x40	; 64
 282:	89 83       	std	Y+1, r24	; 0x01
	BusLinesState(&bus_data, 0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 28e:	78 01       	movw	r14, r16
 290:	88 e0       	ldi	r24, 0x08	; 8
 292:	e8 0e       	add	r14, r24
 294:	f1 1c       	adc	r15, r1
	
	for (uint8_t i = 0; i < 8; i++)
	{
		BusLinesState(data, 1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		data++;
 29e:	0f 5f       	subi	r16, 0xFF	; 255
 2a0:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t bus_data = 0b1000000;
	
	bus_data |= Addr*8;
	BusLinesState(&bus_data, 0);
	
	for (uint8_t i = 0; i < 8; i++)
 2a2:	e0 16       	cp	r14, r16
 2a4:	f1 06       	cpc	r15, r17
 2a6:	b9 f7       	brne	.-18     	; 0x296 <LCD_UserSymbolsWrite+0x30>
	{
		BusLinesState(data, 1);
		data++;
	}
}
 2a8:	0f 90       	pop	r0
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	0f 91       	pop	r16
 2b2:	ff 90       	pop	r15
 2b4:	ef 90       	pop	r14
 2b6:	08 95       	ret

000002b8 <LCD_Init>:
		}
	}
}

void LCD_Init(void)
{
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <LCD_Init+0xc>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	2f e5       	ldi	r18, 0x5F	; 95
 2ca:	8a ee       	ldi	r24, 0xEA	; 234
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <LCD_Init+0x16>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_Init+0x20>
 2d8:	00 00       	nop
	_delay_ms(15);
	
	uint8_t bus_data = 0b100000;
 2da:	80 e2       	ldi	r24, 0x20	; 32
 2dc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t empty_Init = 0x33;
 2de:	83 e3       	ldi	r24, 0x33	; 51
 2e0:	8a 83       	std	Y+2, r24	; 0x02
	
	for (uint8_t i = 0; i < 2; i++)
	{
		if (i == 0)
		BusLinesState(&empty_Init, 0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	ce 01       	movw	r24, r28
 2e6:	02 96       	adiw	r24, 0x02	; 2
 2e8:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		else if (i == 1)
		{
			empty_Init--;
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	81 50       	subi	r24, 0x01	; 1
 2f0:	8a 83       	std	Y+2, r24	; 0x02
			BusLinesState(&empty_Init, 0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	ce 01       	movw	r24, r28
 2f6:	02 96       	adiw	r24, 0x02	; 2
 2f8:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
	
	if (Data_Length == 1) Sbit(bus_data, 4);
	else Cbit(bus_data, 4);
	if (NumberOfLines == 1) Sbit(bus_data, 3);
	else Cbit(bus_data, 3);
	if (Font == 1) Sbit(bus_data, 2);
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	8f 7e       	andi	r24, 0xEF	; 239
 300:	8c 60       	ori	r24, 0x0C	; 12
 302:	89 83       	std	Y+1, r24	; 0x01
	else Cbit(bus_data, 2);
	
	BusLinesState(&bus_data, 0);
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	ce 01       	movw	r24, r28
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 30e:	0f 2e       	mov	r0, r31
 310:	fc e0       	ldi	r31, 0x0C	; 12
 312:	ef 2e       	mov	r14, r31
 314:	f1 e0       	ldi	r31, 0x01	; 1
 316:	ff 2e       	mov	r15, r31
 318:	f0 2d       	mov	r31, r0
	
	for (uint8_t i = 0; i < 7; i++)
 31a:	10 e0       	ldi	r17, 0x00	; 0
	LCD_UserSymbolsWrite(i, &UserSymbol[i][0]);
 31c:	b7 01       	movw	r22, r14
 31e:	81 2f       	mov	r24, r17
 320:	0e 94 33 01 	call	0x266	; 0x266 <LCD_UserSymbolsWrite>
	if (Font == 1) Sbit(bus_data, 2);
	else Cbit(bus_data, 2);
	
	BusLinesState(&bus_data, 0);
	
	for (uint8_t i = 0; i < 7; i++)
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	28 e0       	ldi	r18, 0x08	; 8
 328:	e2 0e       	add	r14, r18
 32a:	f1 1c       	adc	r15, r1
 32c:	17 30       	cpi	r17, 0x07	; 7
 32e:	b1 f7       	brne	.-20     	; 0x31c <LCD_Init+0x64>
	LCD_UserSymbolsWrite(i, &UserSymbol[i][0]);
}
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	08 95       	ret

00000340 <LCD_Show>:
		data++;
	}
}

void LCD_Show(uint8_t Addr, uint8_t Str, uint8_t Cursor)
{
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	00 d0       	rcall	.+0      	; 0x346 <LCD_Show+0x6>
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t x = 0;
	
	if (Str == 0)
 34c:	61 11       	cpse	r22, r1
 34e:	0c c0       	rjmp	.+24     	; 0x368 <LCD_Show+0x28>
	{
		x=FirstStr_StartPosition_DDRAM_Addr+Cursor;
 350:	40 58       	subi	r20, 0x80	; 128
 352:	49 83       	std	Y+1, r20	; 0x01
		
		BusLinesState(&x, 0);
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		BusLinesState(&Addr, 1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	ce 01       	movw	r24, r28
 360:	02 96       	adiw	r24, 0x02	; 2
 362:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 366:	0e c0       	rjmp	.+28     	; 0x384 <LCD_Show+0x44>
	}
	else
	if (Str == 1)
 368:	61 30       	cpi	r22, 0x01	; 1
 36a:	61 f4       	brne	.+24     	; 0x384 <LCD_Show+0x44>
	{
		x=SecondStr_StartPosition_DDRAM_Addr+Cursor;
 36c:	40 54       	subi	r20, 0x40	; 64
 36e:	49 83       	std	Y+1, r20	; 0x01
		
		BusLinesState(&x, 0);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		BusLinesState(&Addr, 1);
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	ce 01       	movw	r24, r28
 37e:	02 96       	adiw	r24, 0x02	; 2
 380:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
	}
}
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <LCD_String>:

void LCD_String(char str1[], uint8_t y, uint8_t x)
{
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	fc 01       	movw	r30, r24
	uint8_t n;
	for(n = 0; str1[n] != '\0'; n++)
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	81 f0       	breq	.+32     	; 0x3c0 <LCD_String+0x32>
 3a0:	f4 2e       	mov	r15, r20
 3a2:	d6 2f       	mov	r29, r22
 3a4:	8f 01       	movw	r16, r30
 3a6:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_Show(str1[n], y, n + x);
 3a8:	4f 2d       	mov	r20, r15
 3aa:	4c 0f       	add	r20, r28
 3ac:	6d 2f       	mov	r22, r29
 3ae:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
}

void LCD_String(char str1[], uint8_t y, uint8_t x)
{
	uint8_t n;
	for(n = 0; str1[n] != '\0'; n++)
 3b2:	cf 5f       	subi	r28, 0xFF	; 255
 3b4:	f8 01       	movw	r30, r16
 3b6:	ec 0f       	add	r30, r28
 3b8:	f1 1d       	adc	r31, r1
 3ba:	80 81       	ld	r24, Z
 3bc:	81 11       	cpse	r24, r1
 3be:	f4 cf       	rjmp	.-24     	; 0x3a8 <LCD_String+0x1a>
	LCD_Show(str1[n], y, n + x);
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	ff 90       	pop	r15
 3ca:	08 95       	ret

000003cc <drawBigDigits>:

void drawBigDigits(uint8_t digit, uint8_t place)
{
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29

	switch (digit) {
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	8a 30       	cpi	r24, 0x0A	; 10
 3d6:	91 05       	cpc	r25, r1
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <drawBigDigits+0x10>
 3da:	67 c1       	rjmp	.+718    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 3dc:	c6 2f       	mov	r28, r22
 3de:	fc 01       	movw	r30, r24
 3e0:	ec 5c       	subi	r30, 0xCC	; 204
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <__tablejump2__>
		case 0:
		LCD_Show(0, 0, place);
 3e8:	46 2f       	mov	r20, r22
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(1, 0, place + 1);
 3f2:	11 e0       	ldi	r17, 0x01	; 1
 3f4:	1c 0f       	add	r17, r28
 3f6:	41 2f       	mov	r20, r17
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 2);
 400:	d2 e0       	ldi	r29, 0x02	; 2
 402:	dc 0f       	add	r29, r28
 404:	4d 2f       	mov	r20, r29
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(3, 1, place);
 40e:	4c 2f       	mov	r20, r28
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 418:	41 2f       	mov	r20, r17
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	84 e0       	ldi	r24, 0x04	; 4
 41e:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(5, 1, place + 2);
 422:	4d 2f       	mov	r20, r29
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	85 e0       	ldi	r24, 0x05	; 5
 428:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 42c:	3e c1       	rjmp	.+636    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 1:
		LCD_Show(1, 0, place);
 42e:	46 2f       	mov	r20, r22
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 1);
 438:	11 e0       	ldi	r17, 0x01	; 1
 43a:	1c 0f       	add	r17, r28
 43c:	41 2f       	mov	r20, r17
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_String(" ", 0, place + 2);
 446:	d2 e0       	ldi	r29, 0x02	; 2
 448:	dc 0f       	add	r29, r28
 44a:	4d 2f       	mov	r20, r29
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	8b e5       	ldi	r24, 0x5B	; 91
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_Show(4, 1, place);
 456:	4c 2f       	mov	r20, r28
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(7, 1, place + 1);
 460:	41 2f       	mov	r20, r17
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	87 e0       	ldi	r24, 0x07	; 7
 466:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 2);
 46a:	4d 2f       	mov	r20, r29
 46c:	61 e0       	ldi	r22, 0x01	; 1
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 474:	1a c1       	rjmp	.+564    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 2:
		LCD_Show(6, 0, place);
 476:	46 2f       	mov	r20, r22
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	86 e0       	ldi	r24, 0x06	; 6
 47c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 1);
 480:	11 e0       	ldi	r17, 0x01	; 1
 482:	1c 0f       	add	r17, r28
 484:	41 2f       	mov	r20, r17
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	86 e0       	ldi	r24, 0x06	; 6
 48a:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 2);
 48e:	d2 e0       	ldi	r29, 0x02	; 2
 490:	dc 0f       	add	r29, r28
 492:	4d 2f       	mov	r20, r29
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	82 e0       	ldi	r24, 0x02	; 2
 498:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(3, 1, place);
 49c:	4c 2f       	mov	r20, r28
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 4a6:	41 2f       	mov	r20, r17
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 2);
 4b0:	4d 2f       	mov	r20, r29
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	84 e0       	ldi	r24, 0x04	; 4
 4b6:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 4ba:	f7 c0       	rjmp	.+494    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 3:
		LCD_Show(6, 0, place);
 4bc:	46 2f       	mov	r20, r22
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 1);
 4c6:	11 e0       	ldi	r17, 0x01	; 1
 4c8:	1c 0f       	add	r17, r28
 4ca:	41 2f       	mov	r20, r17
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 2);
 4d4:	d2 e0       	ldi	r29, 0x02	; 2
 4d6:	dc 0f       	add	r29, r28
 4d8:	4d 2f       	mov	r20, r29
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place);
 4e2:	4c 2f       	mov	r20, r28
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 4ec:	41 2f       	mov	r20, r17
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(5, 1, place + 2);
 4f6:	4d 2f       	mov	r20, r29
 4f8:	61 e0       	ldi	r22, 0x01	; 1
 4fa:	85 e0       	ldi	r24, 0x05	; 5
 4fc:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 500:	d4 c0       	rjmp	.+424    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 4:
		LCD_Show(3, 0, place);
 502:	46 2f       	mov	r20, r22
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 0, place + 1);
 50c:	11 e0       	ldi	r17, 0x01	; 1
 50e:	1c 0f       	add	r17, r28
 510:	41 2f       	mov	r20, r17
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(7, 0, place + 2);
 51a:	d2 e0       	ldi	r29, 0x02	; 2
 51c:	dc 0f       	add	r29, r28
 51e:	4d 2f       	mov	r20, r29
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_String(" ", 1, place);
 528:	4c 2f       	mov	r20, r28
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	8b e5       	ldi	r24, 0x5B	; 91
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" ", 1, place + 1);
 534:	41 2f       	mov	r20, r17
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	8b e5       	ldi	r24, 0x5B	; 91
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_Show(7, 1, place + 2);
 540:	4d 2f       	mov	r20, r29
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	87 e0       	ldi	r24, 0x07	; 7
 546:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 54a:	af c0       	rjmp	.+350    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 5:
		LCD_Show(3, 0, place);
 54c:	46 2f       	mov	r20, r22
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	83 e0       	ldi	r24, 0x03	; 3
 552:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 1);
 556:	11 e0       	ldi	r17, 0x01	; 1
 558:	1c 0f       	add	r17, r28
 55a:	41 2f       	mov	r20, r17
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	86 e0       	ldi	r24, 0x06	; 6
 560:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 2);
 564:	d2 e0       	ldi	r29, 0x02	; 2
 566:	dc 0f       	add	r29, r28
 568:	4d 2f       	mov	r20, r29
 56a:	60 e0       	ldi	r22, 0x00	; 0
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place);
 572:	4c 2f       	mov	r20, r28
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	84 e0       	ldi	r24, 0x04	; 4
 578:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 57c:	41 2f       	mov	r20, r17
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	84 e0       	ldi	r24, 0x04	; 4
 582:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(5, 1, place + 2);
 586:	4d 2f       	mov	r20, r29
 588:	61 e0       	ldi	r22, 0x01	; 1
 58a:	85 e0       	ldi	r24, 0x05	; 5
 58c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 590:	8c c0       	rjmp	.+280    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 6:
		LCD_Show(0, 0, place);
 592:	46 2f       	mov	r20, r22
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 1);
 59c:	11 e0       	ldi	r17, 0x01	; 1
 59e:	1c 0f       	add	r17, r28
 5a0:	41 2f       	mov	r20, r17
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	86 e0       	ldi	r24, 0x06	; 6
 5a6:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 2);
 5aa:	d2 e0       	ldi	r29, 0x02	; 2
 5ac:	dc 0f       	add	r29, r28
 5ae:	4d 2f       	mov	r20, r29
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	86 e0       	ldi	r24, 0x06	; 6
 5b4:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(3, 1, place);
 5b8:	4c 2f       	mov	r20, r28
 5ba:	61 e0       	ldi	r22, 0x01	; 1
 5bc:	83 e0       	ldi	r24, 0x03	; 3
 5be:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 5c2:	41 2f       	mov	r20, r17
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(5, 1, place + 2);
 5cc:	4d 2f       	mov	r20, r29
 5ce:	61 e0       	ldi	r22, 0x01	; 1
 5d0:	85 e0       	ldi	r24, 0x05	; 5
 5d2:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 5d6:	69 c0       	rjmp	.+210    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 7:
		LCD_Show(1, 0, place);
 5d8:	46 2f       	mov	r20, r22
 5da:	60 e0       	ldi	r22, 0x00	; 0
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(1, 0, place + 1);
 5e2:	41 e0       	ldi	r20, 0x01	; 1
 5e4:	4c 0f       	add	r20, r28
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 2);
 5ee:	d2 e0       	ldi	r29, 0x02	; 2
 5f0:	dc 0f       	add	r29, r28
 5f2:	4d 2f       	mov	r20, r29
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_String(" ", 1, place);
 5fc:	4c 2f       	mov	r20, r28
 5fe:	61 e0       	ldi	r22, 0x01	; 1
 600:	8b e5       	ldi	r24, 0x5B	; 91
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" ", 1, place + 2);
 608:	4d 2f       	mov	r20, r29
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	8b e5       	ldi	r24, 0x5B	; 91
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_Show(7, 1, place + 2);
 614:	4d 2f       	mov	r20, r29
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	87 e0       	ldi	r24, 0x07	; 7
 61a:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 61e:	45 c0       	rjmp	.+138    	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 8:
		LCD_Show(0, 0, place);
 620:	46 2f       	mov	r20, r22
 622:	60 e0       	ldi	r22, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 1);
 62a:	11 e0       	ldi	r17, 0x01	; 1
 62c:	1c 0f       	add	r17, r28
 62e:	41 2f       	mov	r20, r17
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	86 e0       	ldi	r24, 0x06	; 6
 634:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 2);
 638:	d2 e0       	ldi	r29, 0x02	; 2
 63a:	dc 0f       	add	r29, r28
 63c:	4d 2f       	mov	r20, r29
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(3, 1, place);
 646:	4c 2f       	mov	r20, r28
 648:	61 e0       	ldi	r22, 0x01	; 1
 64a:	83 e0       	ldi	r24, 0x03	; 3
 64c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 650:	41 2f       	mov	r20, r17
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	84 e0       	ldi	r24, 0x04	; 4
 656:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(5, 1, place + 2);
 65a:	4d 2f       	mov	r20, r29
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	85 e0       	ldi	r24, 0x05	; 5
 660:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
 664:	22 c0       	rjmp	.+68     	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
		
		case 9:
		LCD_Show(0, 0, place);
 666:	46 2f       	mov	r20, r22
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	80 e0       	ldi	r24, 0x00	; 0
 66c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(6, 0, place + 1);
 670:	11 e0       	ldi	r17, 0x01	; 1
 672:	1c 0f       	add	r17, r28
 674:	41 2f       	mov	r20, r17
 676:	60 e0       	ldi	r22, 0x00	; 0
 678:	86 e0       	ldi	r24, 0x06	; 6
 67a:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(2, 0, place + 2);
 67e:	d2 e0       	ldi	r29, 0x02	; 2
 680:	dc 0f       	add	r29, r28
 682:	4d 2f       	mov	r20, r29
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	82 e0       	ldi	r24, 0x02	; 2
 688:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place);
 68c:	4c 2f       	mov	r20, r28
 68e:	61 e0       	ldi	r22, 0x01	; 1
 690:	84 e0       	ldi	r24, 0x04	; 4
 692:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(4, 1, place + 1);
 696:	41 2f       	mov	r20, r17
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	84 e0       	ldi	r24, 0x04	; 4
 69c:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		LCD_Show(5, 1, place + 2);
 6a0:	4d 2f       	mov	r20, r29
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	85 e0       	ldi	r24, 0x05	; 5
 6a6:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_Show>
		break;
	}
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	08 95       	ret

000006b2 <main>:
#include "main.h"

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00;
 6b2:	8f ef       	ldi	r24, 0xFF	; 255
 6b4:	8a b9       	out	0x0a, r24	; 10
 6b6:	1b b8       	out	0x0b, r1	; 11
	
	LCD_Init();
 6b8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <LCD_Init>
	LCD_DisplEnable_CursOnOffBlink(1, 0, 0);
 6bc:	40 e0       	ldi	r20, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_DisplEnable_CursOnOffBlink>
	
	LCD_String("                ", 0, 0);
 6c6:	40 e0       	ldi	r20, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	8c e4       	ldi	r24, 0x4C	; 76
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
	LCD_String("                ", 1, 0);
 6d2:	40 e0       	ldi	r20, 0x00	; 0
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	8c e4       	ldi	r24, 0x4C	; 76
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>

	drawBigDigits(0, 0);
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <drawBigDigits>
	drawBigDigits(1, 4);
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 e6 01 	call	0x3cc	; 0x3cc <drawBigDigits>
	drawBigDigits(2, 9);
 6ee:	69 e0       	ldi	r22, 0x09	; 9
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <drawBigDigits>
	drawBigDigits(3, 13);
 6f6:	6d e0       	ldi	r22, 0x0D	; 13
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <drawBigDigits>
	
	while (1)
	{	
		LCD_String("+ ", 0, 7);
 6fe:	47 e0       	ldi	r20, 0x07	; 7
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	8d e5       	ldi	r24, 0x5D	; 93
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" +", 1, 7);
 70a:	47 e0       	ldi	r20, 0x07	; 7
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	80 e6       	ldi	r24, 0x60	; 96
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String("+", 1, 3);
 716:	43 e0       	ldi	r20, 0x03	; 3
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	81 e6       	ldi	r24, 0x61	; 97
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String("+", 0, 12);
 722:	4c e0       	ldi	r20, 0x0C	; 12
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	81 e6       	ldi	r24, 0x61	; 97
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" ", 0, 3);
 72e:	43 e0       	ldi	r20, 0x03	; 3
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	8b e5       	ldi	r24, 0x5B	; 91
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" ", 1, 12);
 73a:	4c e0       	ldi	r20, 0x0C	; 12
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	8b e5       	ldi	r24, 0x5B	; 91
 740:	91 e0       	ldi	r25, 0x01	; 1
 742:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
 746:	2f ef       	ldi	r18, 0xFF	; 255
 748:	88 e0       	ldi	r24, 0x08	; 8
 74a:	9d e3       	ldi	r25, 0x3D	; 61
 74c:	21 50       	subi	r18, 0x01	; 1
 74e:	80 40       	sbci	r24, 0x00	; 0
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	e1 f7       	brne	.-8      	; 0x74c <main+0x9a>
 754:	00 c0       	rjmp	.+0      	; 0x756 <main+0xa4>
 756:	00 00       	nop
		
		_delay_ms(1000);
		
		LCD_String(" +", 0, 7);
 758:	47 e0       	ldi	r20, 0x07	; 7
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	80 e6       	ldi	r24, 0x60	; 96
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String("+ ", 1, 7);
 764:	47 e0       	ldi	r20, 0x07	; 7
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	8d e5       	ldi	r24, 0x5D	; 93
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String("+", 1, 3);
 770:	43 e0       	ldi	r20, 0x03	; 3
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	81 e6       	ldi	r24, 0x61	; 97
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String("+", 0, 12);
 77c:	4c e0       	ldi	r20, 0x0C	; 12
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	81 e6       	ldi	r24, 0x61	; 97
 782:	91 e0       	ldi	r25, 0x01	; 1
 784:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" ", 0, 3);
 788:	43 e0       	ldi	r20, 0x03	; 3
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	8b e5       	ldi	r24, 0x5B	; 91
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
		LCD_String(" ", 1, 12);
 794:	4c e0       	ldi	r20, 0x0C	; 12
 796:	61 e0       	ldi	r22, 0x01	; 1
 798:	8b e5       	ldi	r24, 0x5B	; 91
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 c7 01 	call	0x38e	; 0x38e <LCD_String>
 7a0:	2f ef       	ldi	r18, 0xFF	; 255
 7a2:	88 e0       	ldi	r24, 0x08	; 8
 7a4:	9d e3       	ldi	r25, 0x3D	; 61
 7a6:	21 50       	subi	r18, 0x01	; 1
 7a8:	80 40       	sbci	r24, 0x00	; 0
 7aa:	90 40       	sbci	r25, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <main+0xf4>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0xfe>
 7b0:	00 00       	nop
 7b2:	a5 cf       	rjmp	.-182    	; 0x6fe <main+0x4c>

000007b4 <__tablejump2__>:
 7b4:	ee 0f       	add	r30, r30
 7b6:	ff 1f       	adc	r31, r31
 7b8:	05 90       	lpm	r0, Z+
 7ba:	f4 91       	lpm	r31, Z
 7bc:	e0 2d       	mov	r30, r0
 7be:	09 94       	ijmp

000007c0 <_exit>:
 7c0:	f8 94       	cli

000007c2 <__stop_program>:
 7c2:	ff cf       	rjmp	.-2      	; 0x7c2 <__stop_program>
